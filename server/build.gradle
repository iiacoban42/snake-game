import com.github.spotbugs.SpotBugsTask

plugins {
	id 'org.springframework.boot' version '2.2.1.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	id 'jacoco'

	// Code style
	id 'checkstyle'

	// PMD
	id 'pmd'

	// FindBugs / SpotBugs
	id "com.github.spotbugs" version "2.0.1"
}

group = 'com.snake'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = 13

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

repositories {
	mavenCentral()
}

test {
	useJUnitPlatform()

	jacoco {
		enabled = true
		includes = ['com.snake.server.*']
		excludes = []
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compile group: 'org.postgresql', name: 'postgresql', version: '42.1.4'

	testCompile group: 'org.mockito', name: 'mockito-core', version: '2.10.0'

	testCompile group: 'junit', name: 'junit', version: '4.12'


	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation('org.junit.jupiter:junit-jupiter:5.5.2')
	spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'
			includes = ['com.snake.server.*']

			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 0.3
			}
		}
	}
}

checkstyle {
	toolVersion "8.25"
	configFile = rootProject.file('config/checkstyle/checkstyle.xml')
}

pmd{
}

spotbugs {
	sourceSets = [sourceSets.main]
	toolVersion = '4.0.0-beta4'
	ignoreFailures = false
	effort = "default"
	reportLevel = "high"
	visitors = ["FindSqlInjection", "SwitchFallthrough"]
	excludeFilter = file("$rootProject.projectDir/config/spotbugs/excludeFilter.xml")
}

tasks.withType(SpotBugsTask) {
	reports.xml.enabled = false
	reports.html.enabled = true
}

wrapper {
	distributionType = Wrapper.DistributionType.ALL
}

